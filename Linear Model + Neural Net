{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "783f9222",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:22.366183Z",
     "iopub.status.busy": "2025-02-18T19:35:22.365774Z",
     "iopub.status.idle": "2025-02-18T19:35:27.374350Z",
     "shell.execute_reply": "2025-02-18T19:35:27.373188Z"
    },
    "papermill": {
     "duration": 5.021124,
     "end_time": "2025-02-18T19:35:27.376646",
     "exception": false,
     "start_time": "2025-02-18T19:35:22.355522",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/spaceship-titanic/sample_submission.csv\n",
      "/kaggle/input/spaceship-titanic/train.csv\n",
      "/kaggle/input/spaceship-titanic/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import torch \n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "\n",
    "np.set_printoptions(linewidth=140)\n",
    "torch.set_printoptions(linewidth=140, sci_mode=False, edgeitems=7)\n",
    "pd.set_option('display.width', 140)\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04c8d2bb",
   "metadata": {
    "papermill": {
     "duration": 0.007896,
     "end_time": "2025-02-18T19:35:27.393606",
     "exception": false,
     "start_time": "2025-02-18T19:35:27.385710",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First lets get the training data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a343cca2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:27.411623Z",
     "iopub.status.busy": "2025-02-18T19:35:27.411049Z",
     "iopub.status.idle": "2025-02-18T19:35:27.512555Z",
     "shell.execute_reply": "2025-02-18T19:35:27.511453Z"
    },
    "papermill": {
     "duration": 0.112998,
     "end_time": "2025-02-18T19:35:27.514701",
     "exception": false,
     "start_time": "2025-02-18T19:35:27.401703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>HomePlanet</th>\n",
       "      <th>CryoSleep</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Age</th>\n",
       "      <th>VIP</th>\n",
       "      <th>RoomService</th>\n",
       "      <th>FoodCourt</th>\n",
       "      <th>ShoppingMall</th>\n",
       "      <th>Spa</th>\n",
       "      <th>VRDeck</th>\n",
       "      <th>Name</th>\n",
       "      <th>Transported</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0001_01</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>B/0/P</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>39.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Maham Ofracculy</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0002_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>False</td>\n",
       "      <td>F/0/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>24.0</td>\n",
       "      <td>False</td>\n",
       "      <td>109.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>549.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>Juanna Vines</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0003_01</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>A/0/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>58.0</td>\n",
       "      <td>True</td>\n",
       "      <td>43.0</td>\n",
       "      <td>3576.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6715.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>Altark Susent</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0003_02</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>A/0/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>33.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1283.0</td>\n",
       "      <td>371.0</td>\n",
       "      <td>3329.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Solam Susent</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0004_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>False</td>\n",
       "      <td>F/1/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>16.0</td>\n",
       "      <td>False</td>\n",
       "      <td>303.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>151.0</td>\n",
       "      <td>565.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Willy Santantines</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>0103_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>False</td>\n",
       "      <td>F/24/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>24.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>Arlen Mclainez</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>0103_02</td>\n",
       "      <td>Earth</td>\n",
       "      <td>True</td>\n",
       "      <td>G/18/S</td>\n",
       "      <td>55 Cancri e</td>\n",
       "      <td>9.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Shaele Mclainez</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>0103_03</td>\n",
       "      <td>Earth</td>\n",
       "      <td>True</td>\n",
       "      <td>G/18/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>6.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Fanne Mclainez</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>0105_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>NaN</td>\n",
       "      <td>F/21/P</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>27.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>Carry Cleachrand</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>0107_01</td>\n",
       "      <td>Mars</td>\n",
       "      <td>False</td>\n",
       "      <td>D/2/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>21.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1743.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Coobix Hart</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId HomePlanet CryoSleep   Cabin  Destination   Age    VIP  RoomService  FoodCourt  ShoppingMall     Spa  VRDeck  \\\n",
       "0      0001_01     Europa     False   B/0/P  TRAPPIST-1e  39.0  False          0.0        0.0           0.0     0.0     0.0   \n",
       "1      0002_01      Earth     False   F/0/S  TRAPPIST-1e  24.0  False        109.0        9.0          25.0   549.0    44.0   \n",
       "2      0003_01     Europa     False   A/0/S  TRAPPIST-1e  58.0   True         43.0     3576.0           0.0  6715.0    49.0   \n",
       "3      0003_02     Europa     False   A/0/S  TRAPPIST-1e  33.0  False          0.0     1283.0         371.0  3329.0   193.0   \n",
       "4      0004_01      Earth     False   F/1/S  TRAPPIST-1e  16.0  False        303.0       70.0         151.0   565.0     2.0   \n",
       "..         ...        ...       ...     ...          ...   ...    ...          ...        ...           ...     ...     ...   \n",
       "95     0103_01      Earth     False  F/24/S  TRAPPIST-1e  24.0  False          0.0        NaN           0.0     0.0    17.0   \n",
       "96     0103_02      Earth      True  G/18/S  55 Cancri e   9.0  False          0.0        0.0           0.0     0.0     0.0   \n",
       "97     0103_03      Earth      True  G/18/S  TRAPPIST-1e   6.0  False          0.0        0.0           0.0     0.0     0.0   \n",
       "98     0105_01      Earth       NaN  F/21/P  TRAPPIST-1e  27.0  False          0.0        0.0         570.0     2.0   131.0   \n",
       "99     0107_01       Mars     False   D/2/S  TRAPPIST-1e  21.0  False       1743.0        5.0          17.0     0.0     0.0   \n",
       "\n",
       "                 Name  Transported  \n",
       "0     Maham Ofracculy        False  \n",
       "1        Juanna Vines         True  \n",
       "2       Altark Susent        False  \n",
       "3        Solam Susent        False  \n",
       "4   Willy Santantines         True  \n",
       "..                ...          ...  \n",
       "95     Arlen Mclainez         True  \n",
       "96    Shaele Mclainez         True  \n",
       "97     Fanne Mclainez        False  \n",
       "98   Carry Cleachrand        False  \n",
       "99        Coobix Hart        False  \n",
       "\n",
       "[100 rows x 14 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataFrame = pd.read_csv(\"/kaggle/input/spaceship-titanic/train.csv\")\n",
    "dataFrame.head(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4adeb78",
   "metadata": {
    "papermill": {
     "duration": 0.008527,
     "end_time": "2025-02-18T19:35:27.531809",
     "exception": false,
     "start_time": "2025-02-18T19:35:27.523282",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Looking at the Dataframe at first glance, it seems like the only columns that wouldve really affected the chances of an individual being transported would be :- **HomePlanet, Cryosleep, Destination, Age, VIP**. So for this neural net these will be our independant variables "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a9820fd",
   "metadata": {
    "papermill": {
     "duration": 0.008359,
     "end_time": "2025-02-18T19:35:27.549720",
     "exception": false,
     "start_time": "2025-02-18T19:35:27.541361",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Lets get a handy summarization of the data first"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "47336158",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:27.569953Z",
     "iopub.status.busy": "2025-02-18T19:35:27.569574Z",
     "iopub.status.idle": "2025-02-18T19:35:27.600514Z",
     "shell.execute_reply": "2025-02-18T19:35:27.599300Z"
    },
    "papermill": {
     "duration": 0.044502,
     "end_time": "2025-02-18T19:35:27.602814",
     "exception": false,
     "start_time": "2025-02-18T19:35:27.558312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>RoomService</th>\n",
       "      <th>FoodCourt</th>\n",
       "      <th>ShoppingMall</th>\n",
       "      <th>Spa</th>\n",
       "      <th>VRDeck</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8514.000000</td>\n",
       "      <td>8512.000000</td>\n",
       "      <td>8510.000000</td>\n",
       "      <td>8485.000000</td>\n",
       "      <td>8510.000000</td>\n",
       "      <td>8505.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>28.827930</td>\n",
       "      <td>224.687617</td>\n",
       "      <td>458.077203</td>\n",
       "      <td>173.729169</td>\n",
       "      <td>311.138778</td>\n",
       "      <td>304.854791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>14.489021</td>\n",
       "      <td>666.717663</td>\n",
       "      <td>1611.489240</td>\n",
       "      <td>604.696458</td>\n",
       "      <td>1136.705535</td>\n",
       "      <td>1145.717189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>19.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>27.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>38.000000</td>\n",
       "      <td>47.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>46.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>79.000000</td>\n",
       "      <td>14327.000000</td>\n",
       "      <td>29813.000000</td>\n",
       "      <td>23492.000000</td>\n",
       "      <td>22408.000000</td>\n",
       "      <td>24133.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Age   RoomService     FoodCourt  ShoppingMall           Spa        VRDeck\n",
       "count  8514.000000   8512.000000   8510.000000   8485.000000   8510.000000   8505.000000\n",
       "mean     28.827930    224.687617    458.077203    173.729169    311.138778    304.854791\n",
       "std      14.489021    666.717663   1611.489240    604.696458   1136.705535   1145.717189\n",
       "min       0.000000      0.000000      0.000000      0.000000      0.000000      0.000000\n",
       "25%      19.000000      0.000000      0.000000      0.000000      0.000000      0.000000\n",
       "50%      27.000000      0.000000      0.000000      0.000000      0.000000      0.000000\n",
       "75%      38.000000     47.000000     76.000000     27.000000     59.000000     46.000000\n",
       "max      79.000000  14327.000000  29813.000000  23492.000000  22408.000000  24133.000000"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataFrame.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffa480a0",
   "metadata": {
    "papermill": {
     "duration": 0.008422,
     "end_time": "2025-02-18T19:35:27.621232",
     "exception": false,
     "start_time": "2025-02-18T19:35:27.612810",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we shall check if there is any missing values in any of the columns and the number of missing values in each of the columns if any"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "95d24d99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:27.640446Z",
     "iopub.status.busy": "2025-02-18T19:35:27.640090Z",
     "iopub.status.idle": "2025-02-18T19:35:27.652002Z",
     "shell.execute_reply": "2025-02-18T19:35:27.650788Z"
    },
    "papermill": {
     "duration": 0.02416,
     "end_time": "2025-02-18T19:35:27.654257",
     "exception": false,
     "start_time": "2025-02-18T19:35:27.630097",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId       0\n",
       "HomePlanet      201\n",
       "CryoSleep       217\n",
       "Cabin           199\n",
       "Destination     182\n",
       "Age             179\n",
       "VIP             203\n",
       "RoomService     181\n",
       "FoodCourt       183\n",
       "ShoppingMall    208\n",
       "Spa             183\n",
       "VRDeck          188\n",
       "Name            200\n",
       "Transported       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataFrame.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "efabe582",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:27.674127Z",
     "iopub.status.busy": "2025-02-18T19:35:27.673783Z",
     "iopub.status.idle": "2025-02-18T19:35:27.713338Z",
     "shell.execute_reply": "2025-02-18T19:35:27.712325Z"
    },
    "papermill": {
     "duration": 0.052545,
     "end_time": "2025-02-18T19:35:27.715669",
     "exception": false,
     "start_time": "2025-02-18T19:35:27.663124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId                0001_01\n",
       "HomePlanet                   Earth\n",
       "CryoSleep                    False\n",
       "Cabin                      G/734/S\n",
       "Destination            TRAPPIST-1e\n",
       "Age                           24.0\n",
       "VIP                          False\n",
       "RoomService                    0.0\n",
       "FoodCourt                      0.0\n",
       "ShoppingMall                   0.0\n",
       "Spa                            0.0\n",
       "VRDeck                         0.0\n",
       "Name            Alraium Disivering\n",
       "Transported                   True\n",
       "Name: 0, dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modes = dataFrame.mode().iloc[0]\n",
    "modes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8c30188a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:27.735825Z",
     "iopub.status.busy": "2025-02-18T19:35:27.735371Z",
     "iopub.status.idle": "2025-02-18T19:35:27.759827Z",
     "shell.execute_reply": "2025-02-18T19:35:27.758693Z"
    },
    "papermill": {
     "duration": 0.03744,
     "end_time": "2025-02-18T19:35:27.762141",
     "exception": false,
     "start_time": "2025-02-18T19:35:27.724701",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/1400353500.py:1: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  dataFrame.fillna(modes, inplace=True)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "PassengerId     0\n",
       "HomePlanet      0\n",
       "CryoSleep       0\n",
       "Cabin           0\n",
       "Destination     0\n",
       "Age             0\n",
       "VIP             0\n",
       "RoomService     0\n",
       "FoodCourt       0\n",
       "ShoppingMall    0\n",
       "Spa             0\n",
       "VRDeck          0\n",
       "Name            0\n",
       "Transported     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataFrame.fillna(modes, inplace=True)\n",
    "dataFrame.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52735395",
   "metadata": {
    "papermill": {
     "duration": 0.008785,
     "end_time": "2025-02-18T19:35:27.780084",
     "exception": false,
     "start_time": "2025-02-18T19:35:27.771299",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now that we have gotten rid of all the 'N/A' values, we can now preprocess the data and see if we need to alter some columns to our benefit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c90134d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:27.801032Z",
     "iopub.status.busy": "2025-02-18T19:35:27.800641Z",
     "iopub.status.idle": "2025-02-18T19:35:27.827392Z",
     "shell.execute_reply": "2025-02-18T19:35:27.826264Z"
    },
    "papermill": {
     "duration": 0.040529,
     "end_time": "2025-02-18T19:35:27.829750",
     "exception": false,
     "start_time": "2025-02-18T19:35:27.789221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>RoomService</th>\n",
       "      <th>FoodCourt</th>\n",
       "      <th>ShoppingMall</th>\n",
       "      <th>Spa</th>\n",
       "      <th>VRDeck</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8693.000000</td>\n",
       "      <td>8693.000000</td>\n",
       "      <td>8693.000000</td>\n",
       "      <td>8693.000000</td>\n",
       "      <td>8693.000000</td>\n",
       "      <td>8693.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>28.728517</td>\n",
       "      <td>220.009318</td>\n",
       "      <td>448.434027</td>\n",
       "      <td>169.572300</td>\n",
       "      <td>304.588865</td>\n",
       "      <td>298.261820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>14.355438</td>\n",
       "      <td>660.519050</td>\n",
       "      <td>1595.790627</td>\n",
       "      <td>598.007164</td>\n",
       "      <td>1125.562559</td>\n",
       "      <td>1134.126417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>20.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>27.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>37.000000</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>53.000000</td>\n",
       "      <td>40.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>79.000000</td>\n",
       "      <td>14327.000000</td>\n",
       "      <td>29813.000000</td>\n",
       "      <td>23492.000000</td>\n",
       "      <td>22408.000000</td>\n",
       "      <td>24133.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Age   RoomService     FoodCourt  ShoppingMall           Spa        VRDeck\n",
       "count  8693.000000   8693.000000   8693.000000   8693.000000   8693.000000   8693.000000\n",
       "mean     28.728517    220.009318    448.434027    169.572300    304.588865    298.261820\n",
       "std      14.355438    660.519050   1595.790627    598.007164   1125.562559   1134.126417\n",
       "min       0.000000      0.000000      0.000000      0.000000      0.000000      0.000000\n",
       "25%      20.000000      0.000000      0.000000      0.000000      0.000000      0.000000\n",
       "50%      27.000000      0.000000      0.000000      0.000000      0.000000      0.000000\n",
       "75%      37.000000     41.000000     61.000000     22.000000     53.000000     40.000000\n",
       "max      79.000000  14327.000000  29813.000000  23492.000000  22408.000000  24133.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataFrame.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b480e2f",
   "metadata": {
    "papermill": {
     "duration": 0.009219,
     "end_time": "2025-02-18T19:35:27.848326",
     "exception": false,
     "start_time": "2025-02-18T19:35:27.839107",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "So most of our independant variables are categoric variables, the only real numeric value would be the **Age** variable, below is a histogram of the Age values and it does not seem to have any strong irregularities in its disturbution so we can leave it as is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "569057f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:27.870607Z",
     "iopub.status.busy": "2025-02-18T19:35:27.870179Z",
     "iopub.status.idle": "2025-02-18T19:35:28.176891Z",
     "shell.execute_reply": "2025-02-18T19:35:28.175629Z"
    },
    "papermill": {
     "duration": 0.320398,
     "end_time": "2025-02-18T19:35:28.179258",
     "exception": false,
     "start_time": "2025-02-18T19:35:27.858860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataFrame['Age'].hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7460d9f6",
   "metadata": {
    "papermill": {
     "duration": 0.009446,
     "end_time": "2025-02-18T19:35:28.198712",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.189266",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now for our categoric variables, the best approach for it would be creating dummy variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0671e867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:28.219621Z",
     "iopub.status.busy": "2025-02-18T19:35:28.219198Z",
     "iopub.status.idle": "2025-02-18T19:35:28.239515Z",
     "shell.execute_reply": "2025-02-18T19:35:28.238377Z"
    },
    "papermill": {
     "duration": 0.033749,
     "end_time": "2025-02-18T19:35:28.242107",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.208358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['PassengerId', 'Cabin', 'Age', 'RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck', 'Name', 'Transported',\n",
       "       'HomePlanet_Earth', 'HomePlanet_Europa', 'HomePlanet_Mars', 'CryoSleep_False', 'CryoSleep_True', 'Destination_55 Cancri e',\n",
       "       'Destination_PSO J318.5-22', 'Destination_TRAPPIST-1e', 'VIP_False', 'VIP_True'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataFrame = pd.get_dummies(dataFrame, columns = ['HomePlanet','CryoSleep', 'Destination','VIP'])\n",
    "dataFrame.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2cd2823",
   "metadata": {
    "papermill": {
     "duration": 0.009634,
     "end_time": "2025-02-18T19:35:28.262144",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.252510",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Currently our categoric dummy variables are stored as boolean values 'True/False'. If we are going to need to carry out calculations such as matrix multiplications and gradient descent we will need these dummy variables as integers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dc2400cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:28.284660Z",
     "iopub.status.busy": "2025-02-18T19:35:28.284266Z",
     "iopub.status.idle": "2025-02-18T19:35:28.296478Z",
     "shell.execute_reply": "2025-02-18T19:35:28.295338Z"
    },
    "papermill": {
     "duration": 0.026511,
     "end_time": "2025-02-18T19:35:28.299176",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.272665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "addedColumns = ['HomePlanet_Earth', 'HomePlanet_Europa', 'HomePlanet_Mars', 'CryoSleep_False', 'CryoSleep_True', 'Destination_55 Cancri e',\n",
    "       'Destination_PSO J318.5-22', 'Destination_TRAPPIST-1e', 'VIP_False', 'VIP_True']\n",
    "\n",
    "dataFrame[addedColumns] = dataFrame[addedColumns].astype(int)\n",
    "dataFrame[addedColumns].head()\n",
    "\n",
    "indColumns =  addedColumns + ['Age']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3653c40a",
   "metadata": {
    "papermill": {
     "duration": 0.009497,
     "end_time": "2025-02-18T19:35:28.318820",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.309323",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Lets set up the dependant and independant tensors respectively"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9d8a88fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:28.342618Z",
     "iopub.status.busy": "2025-02-18T19:35:28.342206Z",
     "iopub.status.idle": "2025-02-18T19:35:28.387667Z",
     "shell.execute_reply": "2025-02-18T19:35:28.386525Z"
    },
    "papermill": {
     "duration": 0.060504,
     "end_time": "2025-02-18T19:35:28.390247",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.329743",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([8693, 11])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from torch import tensor\n",
    "\n",
    "independants = tensor(dataFrame[indColumns].values, dtype = torch.int)\n",
    "dependants = tensor(dataFrame.Transported, dtype = torch.int)\n",
    "\n",
    "independants.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55fe2a41",
   "metadata": {
    "papermill": {
     "duration": 0.009716,
     "end_time": "2025-02-18T19:35:28.410311",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.400595",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now here we can see that the age category would dominate the results of the predictions. So lets divide all the categories by their maximum value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9326c2f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:28.433044Z",
     "iopub.status.busy": "2025-02-18T19:35:28.432642Z",
     "iopub.status.idle": "2025-02-18T19:35:28.529414Z",
     "shell.execute_reply": "2025-02-18T19:35:28.528039Z"
    },
    "papermill": {
     "duration": 0.111769,
     "end_time": "2025-02-18T19:35:28.531959",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.420190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.4937],\n",
       "        [1.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.3038],\n",
       "        [0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 1.0000, 0.7342],\n",
       "        [0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.4177],\n",
       "        [1.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.2025],\n",
       "        [1.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 0.5570],\n",
       "        [1.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.3291],\n",
       "        ...,\n",
       "        [0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.4051],\n",
       "        [0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.3797],\n",
       "        [0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.5190],\n",
       "        [1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 0.2278],\n",
       "        [1.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.3291],\n",
       "        [0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.4051],\n",
       "        [0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.5570]])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maxVals,indices = independants.max(dim = 0)\n",
    "independants = independants / maxVals\n",
    "\n",
    "independants"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27752aef",
   "metadata": {
    "papermill": {
     "duration": 0.071236,
     "end_time": "2025-02-18T19:35:28.613324",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.542088",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now that all the independant variables have a value from 0-1, we can now go ahead and create our first basic linear model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdfd3439",
   "metadata": {
    "papermill": {
     "duration": 0.009988,
     "end_time": "2025-02-18T19:35:28.634125",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.624137",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "So our method of carrying out the improvement of the neural net will be using gradient descent and backpropogation. The following steps will show how the linear model will work : -\n",
    "\n",
    "1) Initalize random coeffecients \n",
    "\n",
    "2) Multiply the coefficents by the independant variables and sum up the products to get our predictions\n",
    "\n",
    "3) Using a loss function, we will carry out gradient descent on our inital randomized coeffecients to minimize the loss\n",
    "\n",
    "4) Repeat the process multiple times to find coeffcients that give us resonable accuracy\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ee5c9ee",
   "metadata": {
    "papermill": {
     "duration": 0.010423,
     "end_time": "2025-02-18T19:35:28.656744",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.646321",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First we shall initalize some random coffecients from -0.5 to 0.5, we intend to use matrix multiplication, so for that we shall create a single column matrix for our coefficents"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57ea6617",
   "metadata": {
    "papermill": {
     "duration": 0.011262,
     "end_time": "2025-02-18T19:35:28.678658",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.667396",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "And now lets matrix multiply these coefficents with the independant values, but first lets convert them into matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b7044a4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:28.703093Z",
     "iopub.status.busy": "2025-02-18T19:35:28.702737Z",
     "iopub.status.idle": "2025-02-18T19:35:28.714267Z",
     "shell.execute_reply": "2025-02-18T19:35:28.713124Z"
    },
    "papermill": {
     "duration": 0.026575,
     "end_time": "2025-02-18T19:35:28.716542",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.689967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "numCoeffecients = independants.shape[1]\n",
    "independants = independants[:,None]\n",
    "dependants = dependants[:,None]\n",
    "\n",
    "\n",
    "def predictionFunction(coeffs, indeps):\n",
    "    return (indeps*coeffs).sum(axis=1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ed368fd",
   "metadata": {
    "papermill": {
     "duration": 0.010416,
     "end_time": "2025-02-18T19:35:28.737689",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.727273",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Lets now create a loss function to measure the accuracy that will help us carry out gradient descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7228ced0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:28.761291Z",
     "iopub.status.busy": "2025-02-18T19:35:28.760939Z",
     "iopub.status.idle": "2025-02-18T19:35:28.766457Z",
     "shell.execute_reply": "2025-02-18T19:35:28.765284Z"
    },
    "papermill": {
     "duration": 0.019858,
     "end_time": "2025-02-18T19:35:28.768725",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.748867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def lossFunction(coeffs, indeps, deps):\n",
    "    return torch.abs(predictionFunction(coeffs,indeps)-deps).mean()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddd48da0",
   "metadata": {
    "papermill": {
     "duration": 0.009852,
     "end_time": "2025-02-18T19:35:28.788815",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.778963",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Lets now carry out a gradient descent step"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d03b286",
   "metadata": {
    "papermill": {
     "duration": 0.010482,
     "end_time": "2025-02-18T19:35:28.809479",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.798997",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "So we can put this process in its own function, and we also will create a function that updates the coefficients and resets the gradient of the coeffiecents to 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "513fdc6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:28.831609Z",
     "iopub.status.busy": "2025-02-18T19:35:28.831217Z",
     "iopub.status.idle": "2025-02-18T19:35:28.837231Z",
     "shell.execute_reply": "2025-02-18T19:35:28.835852Z"
    },
    "papermill": {
     "duration": 0.019763,
     "end_time": "2025-02-18T19:35:28.839511",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.819748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def updateCoeffs(coeffs, learningRate):\n",
    "    coeffs.sub_(coeffs.grad * learningRate)\n",
    "    coeffs.grad.zero_()\n",
    "    \n",
    "def initCoeffecients():\n",
    "    return (torch.rand(numCoeffecients)-0.5).requires_grad_()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3193851",
   "metadata": {
    "papermill": {
     "duration": 0.010326,
     "end_time": "2025-02-18T19:35:28.860277",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.849951",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we shall began actually training the model. For this we will need to split the data into training set and a validation set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9055e945",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:28.882302Z",
     "iopub.status.busy": "2025-02-18T19:35:28.881968Z",
     "iopub.status.idle": "2025-02-18T19:35:32.282340Z",
     "shell.execute_reply": "2025-02-18T19:35:32.281304Z"
    },
    "papermill": {
     "duration": 3.414245,
     "end_time": "2025-02-18T19:35:32.284838",
     "exception": false,
     "start_time": "2025-02-18T19:35:28.870593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from fastai.data.transforms import RandomSplitter\n",
    "trainingIndices, validationIndices = RandomSplitter(seed = 40)(dataFrame)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7f2572b",
   "metadata": {
    "papermill": {
     "duration": 0.010763,
     "end_time": "2025-02-18T19:35:32.306004",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.295241",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Note : The above lines of code does nto actually split the data into training and validation set but rather provides the indices for which the split will happen. We must actually carry out the split ourselves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e1af1f82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:32.328479Z",
     "iopub.status.busy": "2025-02-18T19:35:32.327901Z",
     "iopub.status.idle": "2025-02-18T19:35:32.358824Z",
     "shell.execute_reply": "2025-02-18T19:35:32.357597Z"
    },
    "papermill": {
     "duration": 0.045216,
     "end_time": "2025-02-18T19:35:32.361506",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.316290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "indepTrain, indepValid = independants[trainingIndices], independants[validationIndices] \n",
    "\n",
    "depTrain, depValid = dependants[trainingIndices], dependants[validationIndices]\n",
    "\n",
    "def epoch(coeffs, learningRate) :\n",
    "    loss = lossFunction(coeffs, indepTrain, depTrain)\n",
    "    loss.backward()\n",
    "    with torch.no_grad():\n",
    "        updateCoeffs(coeffs, learningRate)\n",
    "    print(f\"{loss:.3f}\", end=\"; \")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d41c2701",
   "metadata": {
    "papermill": {
     "duration": 0.011303,
     "end_time": "2025-02-18T19:35:32.386184",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.374881",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we can create and train our model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "44f082d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:32.409438Z",
     "iopub.status.busy": "2025-02-18T19:35:32.409035Z",
     "iopub.status.idle": "2025-02-18T19:35:32.414600Z",
     "shell.execute_reply": "2025-02-18T19:35:32.413530Z"
    },
    "papermill": {
     "duration": 0.019003,
     "end_time": "2025-02-18T19:35:32.416581",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.397578",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def firstModel(epochs=125, learningRate=0.6):\n",
    "    torch.manual_seed(442)\n",
    "    coeffs = initCoeffecients()\n",
    "    for ep in range(epochs): epoch(coeffs, learningRate=learningRate)\n",
    "    return coeffs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d5101ab",
   "metadata": {
    "papermill": {
     "duration": 0.010198,
     "end_time": "2025-02-18T19:35:32.437157",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.426959",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Lets try the model!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c78630c",
   "metadata": {
    "papermill": {
     "duration": 0.010187,
     "end_time": "2025-02-18T19:35:32.458157",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.447970",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now that we have the final coefficents lets carry out the predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "461cacb3",
   "metadata": {
    "papermill": {
     "duration": 0.010665,
     "end_time": "2025-02-18T19:35:32.479562",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.468897",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In case there are negative predictions, we will also pass the results through a sigmoid function by altering our inital predictionFunction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "276e1726",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:32.502773Z",
     "iopub.status.busy": "2025-02-18T19:35:32.502361Z",
     "iopub.status.idle": "2025-02-18T19:35:32.618475Z",
     "shell.execute_reply": "2025-02-18T19:35:32.617382Z"
    },
    "papermill": {
     "duration": 0.130501,
     "end_time": "2025-02-18T19:35:32.620816",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.490315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.553; 0.549; 0.544; 0.540; 0.535; 0.531; 0.526; 0.524; 0.521; 0.518; 0.517; 0.514; 0.512; 0.509; 0.507; 0.505; 0.504; 0.503; 0.503; 0.503; 0.502; 0.501; 0.501; 0.501; 0.500; 0.499; 0.499; 0.499; 0.498; 0.497; 0.498; 0.497; 0.497; 0.496; 0.496; 0.496; 0.495; 0.495; 0.495; 0.495; 0.494; 0.494; 0.494; 0.494; 0.493; 0.493; 0.493; 0.493; 0.492; 0.492; 0.492; 0.491; 0.491; 0.490; 0.491; 0.490; 0.490; 0.489; 0.489; 0.489; 0.489; 0.488; 0.488; 0.488; 0.487; 0.487; 0.487; 0.487; 0.486; 0.486; 0.486; 0.486; 0.485; 0.485; 0.485; 0.484; 0.484; 0.484; 0.484; 0.483; 0.483; 0.482; 0.482; 0.482; 0.482; 0.481; 0.481; 0.481; 0.480; 0.480; 0.480; 0.480; 0.479; 0.479; 0.479; 0.479; 0.478; 0.478; 0.478; 0.478; 0.478; 0.478; 0.478; 0.478; 0.478; 0.477; 0.478; 0.478; 0.478; 0.477; 0.478; 0.478; 0.477; 0.477; 0.477; 0.477; 0.477; 0.477; 0.477; 0.477; 0.477; 0.477; 0.477; 0.477; 0.477; "
     ]
    },
    {
     "data": {
      "text/plain": [
       "tensor([ 0.0230,  0.6513,  0.3017,  0.0048,  1.0019,  0.2404,  0.4905,  0.0273,  0.3328, -0.2813,  0.1318], requires_grad=True)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finalCoeffecients = firstModel()\n",
    "finalCoeffecients"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2700e79",
   "metadata": {
    "papermill": {
     "duration": 0.009945,
     "end_time": "2025-02-18T19:35:32.641158",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.631213",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we shall design a simple accuracy function that assumes that if the value is greater than 0.5, they have survived, and if not, they have not "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4bbf3e06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:32.663369Z",
     "iopub.status.busy": "2025-02-18T19:35:32.662992Z",
     "iopub.status.idle": "2025-02-18T19:35:32.673804Z",
     "shell.execute_reply": "2025-02-18T19:35:32.672685Z"
    },
    "papermill": {
     "duration": 0.024594,
     "end_time": "2025-02-18T19:35:32.676052",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.651458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.5155)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def acc(coeffs): \n",
    "    return (depValid.bool()==(predictionFunction(indepValid,coeffs)>0.5)).float().mean()\n",
    "acc(finalCoeffecients)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7914746",
   "metadata": {
    "papermill": {
     "duration": 0.010213,
     "end_time": "2025-02-18T19:35:32.696992",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.686779",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "There is our first basic linear regression model. It seems to be around 70 percent accurate which is quite good for a basic model. Lets look to convert this into a neural network"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b924a29",
   "metadata": {
    "papermill": {
     "duration": 0.0101,
     "end_time": "2025-02-18T19:35:32.717702",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.707602",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We will first need to initalize two layers of coefficients for the neural network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c0d56ffa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:32.740084Z",
     "iopub.status.busy": "2025-02-18T19:35:32.739712Z",
     "iopub.status.idle": "2025-02-18T19:35:32.745720Z",
     "shell.execute_reply": "2025-02-18T19:35:32.744336Z"
    },
    "papermill": {
     "duration": 0.019883,
     "end_time": "2025-02-18T19:35:32.747846",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.727963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def initCoeffecients(n_hidden=20):\n",
    "    layer1 = (torch.rand(numCoeffecients, n_hidden)-0.4)/n_hidden\n",
    "    layer2 = torch.rand(n_hidden, 1)-0.1\n",
    "    const = torch.rand(1)[0]\n",
    "    return layer1.requires_grad_(),layer2.requires_grad_(),const.requires_grad_()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40a68932",
   "metadata": {
    "papermill": {
     "duration": 0.010429,
     "end_time": "2025-02-18T19:35:32.768689",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.758260",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e0aa4b43",
   "metadata": {
    "papermill": {
     "duration": 0.010248,
     "end_time": "2025-02-18T19:35:32.789485",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.779237",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We will now alter our prediction function so that it calculates the relu values and outputs them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6e9c0732",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:32.811899Z",
     "iopub.status.busy": "2025-02-18T19:35:32.811523Z",
     "iopub.status.idle": "2025-02-18T19:35:32.816898Z",
     "shell.execute_reply": "2025-02-18T19:35:32.815909Z"
    },
    "papermill": {
     "duration": 0.019026,
     "end_time": "2025-02-18T19:35:32.818952",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.799926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.nn.functional as F\n",
    "def predictionFunction(coeffs, indeps):\n",
    "    l1,l2,const = coeffs\n",
    "    res = F.relu(indeps@l1)\n",
    "    res = res@l2 + const\n",
    "    return torch.sigmoid(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50fc3038",
   "metadata": {
    "papermill": {
     "duration": 0.010014,
     "end_time": "2025-02-18T19:35:32.839355",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.829341",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Following that the updating of coeffiecents process must change as well"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "fe15a734",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-18T19:35:32.862397Z",
     "iopub.status.busy": "2025-02-18T19:35:32.861197Z",
     "iopub.status.idle": "2025-02-18T19:35:32.866701Z",
     "shell.execute_reply": "2025-02-18T19:35:32.865652Z"
    },
    "papermill": {
     "duration": 0.019179,
     "end_time": "2025-02-18T19:35:32.868798",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.849619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def updateCoeffs(coeffs, lr):\n",
    "    for layer in coeffs:\n",
    "        layer.sub_(layer.grad * lr)\n",
    "        layer.grad.zero_()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07c13839",
   "metadata": {
    "papermill": {
     "duration": 0.010359,
     "end_time": "2025-02-18T19:35:32.889610",
     "exception": false,
     "start_time": "2025-02-18T19:35:32.879251",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "And there we go! just like that we have a simplistic neural net set up"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 3220602,
     "sourceId": 34377,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.199036,
   "end_time": "2025-02-18T19:35:34.026272",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-18T19:35:18.827236",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
